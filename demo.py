#!/usr/bin/env python3

"""
Demonstrates how to generate and use an eBay digital signature,
 required by selected eBay API calls.
"""

from argparse import ArgumentParser
from base64 import b64encode
from urllib.parse import urlparse
import json
import sys
import time
import requests
from Crypto.PublicKey import ECC
from Crypto.Signature import eddsa
from Crypto.Hash import SHA256
from requests.exceptions import HTTPError


def create_signing_key(access_token: str) -> dict:
    """
    Generate a new signing key using the eBay Key Management API, and print out details
    of the generated key for the user to make a copy of.

    The key will be linked to the account details entered in main().
    """
    input("""Press enter to generate a new signing key...\n""")

    headers = {
        "Authorization": "Bearer " + access_token,
        "Content-Type": "application/json",
    }

    try:
        response = requests.post(
            "https://apiz.ebay.com/developer/key_management/v1/signing_key",
            headers=headers,
            data='{"signingKeyCipher": "ED25519"}',
            timeout=10,
        )
        response.raise_for_status()
        key = response.json()
    except HTTPError as error:
        sys.exit(f"Unable to create signing key: {error}")

    print("eBay API Signing Key Generation")
    print("-------------------------------")
    print(
        """A digital signature associated with the eBay API credentials provided has been """
        """generated. Details of the key generated by this app will now be printed.\n"""
        """Press enter to continue...\n"""
    )
    input("Private Key: " + key["privateKey"])
    input("Public Key: " + key["publicKey"])
    input("Public Key JWE: " + key["jwe"])
    input("Key ID: " + key["signingKeyId"])
    input("\nKey printing complete, press enter to exit.")


def get_oauth_token(ebay_app_id: str, ebay_cert_id: str) -> str:
    """Returns an eBay OAuth token using the provided eBay App ID and eBay Cert ID"""
    enc_string = f"{ebay_app_id}:{ebay_cert_id}"
    return b64encode(enc_string.encode("ascii")).decode()


def get_access_token(ebay_refresh_token: str, oauth_token: str, scope: str):
    """Returns an eBay API access token, required to make further API calls."""
    headers = {
        "Authorization": "Basic " + oauth_token,
        "Content-Type": "application/x-www-form-urlencoded",
    }

    data = {
        "grant_type": "refresh_token",
        "refresh_token": ebay_refresh_token,
        "scope": scope,
    }

    try:
        response = requests.post(
            "https://api.ebay.com/identity/v1/oauth2/token",
            headers=headers,
            data=data,
            timeout=10,
        )
        response.raise_for_status()
        return response.json()["access_token"]
    except (HTTPError, KeyError) as error:
        sys.exit(f"Unable to fetch access token: {error}")


def get_content_digest(content: str) -> str:
    """
    Generate a digest of the provided content.

    A content digest is needed when using one of the few POST requests requiring a digital
    signature.
    """
    hasher = SHA256.new()
    hasher.update(bytes(content, encoding="utf-8"))
    return b64encode(hasher.digest()).decode()


def get_digital_signature(
    ebay_private_key: str,
    ebay_public_key_jwe: str,
    request_url: str,
    signature_params: str,
) -> str:
    """
    Generate the digital signature using the details provided. The signature is created
    using ED25519.

    To add support for POST requests, pass in a content digest and add a "Content-Digest"
    entry to params, with a value of sha-256:digest:
    """
    url = urlparse(request_url)
    params = (
        f'"x-ebay-signature-key": {ebay_public_key_jwe}\n'
        f'"@method": GET\n'
        f'"@path": {url.path}\n'
        f'"@authority": {url.netloc}\n'
        f'"@signature-params": {signature_params}'
    ).encode()

    try:
        private_key = ECC.import_key(
            f"""-----BEGIN PRIVATE KEY-----\n{ebay_private_key}\n-----END PRIVATE KEY-----"""
        )
        signer = eddsa.new(private_key, mode="rfc8032")
        signature = signer.sign(params)
        return b64encode(signature).decode()
    except ValueError as error:
        sys.exit(f"Error creating digital signature: {error}")


def send_signed_api_request(
    ebay_private_key: str, ebay_public_key_jwe: str, access_token: str
) -> None:
    """
    Sends a request to the eBay API with a digital signature attached.

    The API response text is printed before exiting.
    """
    request_url = "https://apiz.ebay.com/sell/finances/v1/transaction?limit=20&offset=0"

    creation_time = int(time.time())
    signature_input = (
        '("x-ebay-signature-key" "@method" "@path" "@authority");'
        f"created={creation_time}"
    )

    signature = get_digital_signature(
        ebay_private_key=ebay_private_key,
        ebay_public_key_jwe=ebay_public_key_jwe,
        request_url=request_url,
        signature_params=signature_input,
    )

    headers = {
        "Authorization": "Bearer " + access_token,
        "Signature-Input": f"sig1={signature_input}",
        "Signature": f"sig1=:{signature}:",
        "x-ebay-signature-key": ebay_public_key_jwe,
        "x-ebay-enforce-signature": "true",
    }

    try:
        response = requests.get(request_url, headers=headers, timeout=10)
        response.raise_for_status()
        print(response.text)
        sys.exit()
    except HTTPError as error:
        sys.exit(f"Unable to send request: {error}")


def main():
    """Load credentials and read runtime arguments."""
    with open("credentials.json", encoding="UTF-8") as file:
        credentials = json.load(file)

    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        "-g",
        "--generate-key",
        action="store_true",
        help="generate and print a new digital signature key",
    )
    args = parser.parse_args()
    oauth_token = get_oauth_token(
        ebay_app_id=credentials["ebay_app_id"], ebay_cert_id=credentials["ebay_cert_id"]
    )

    if args.generate_key:
        scope = "https://api.ebay.com/oauth/api_scope"
        access_token = get_access_token(
            ebay_refresh_token=credentials["ebay_refresh_token"],
            oauth_token=oauth_token,
            scope=scope,
        )
        create_signing_key(access_token=access_token)
    else:
        scope = "https://api.ebay.com/oauth/api_scope/sell.finances"
        access_token = get_access_token(
            ebay_refresh_token=credentials["ebay_refresh_token"],
            oauth_token=oauth_token,
            scope=scope,
        )
        send_signed_api_request(
            ebay_private_key=credentials["ebay_private_key"],
            ebay_public_key_jwe=credentials["ebay_public_key_jwe"],
            access_token=access_token,
        )


if __name__ == "__main__":
    main()
